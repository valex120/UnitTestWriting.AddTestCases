Конструктор
1. Конструктор. Валидный объект User. Объект Cart создаётся, Customer равен переданному объекту, список товаров пуст.
2. Конструктор. User равен null. Объект Cart создаётся, но обращение к Customer приводит к NullReferenceException.
3. Конструктор. Создание промокода с дисконтом 0% или менее. Выбрасывается ArgumentOutOfRangeException.
4. Конструктор. Создание промокода с дисконтом 100% или более. Выбрасывается ArgumentOutOfRangeException.
5. Конструктор. Создание промокода с временем жизни менее 1 минуты. Выбрасывается ArgumentOutOfRangeException.

GetFullDiscount
1. GetFullDiscount. Нет скидки и промокода, покупка не в день рождения пользователя. Возвращает 0.
2. GetFullDiscount. Нет скидки и промокода, покупка в день рождения пользователя. Возвращает 5.
3. GetFullDiscount. Скидка 10%, промокод отсутствует, покупка не в день рождения пользователя. Возвращает 10.
4. GetFullDiscount. Скидка отсутствует, промокод 10%, покупка не в день рождения пользователя. Возвращает 10.
5. GetFullDiscount. Скидка 10%, промокод 10%, покупка не в день рождения пользователя. Возвращает 20.
6. GetFullDiscount. Скидка 10%, промокод 10%, покупка в день рождения пользователя. Возвращает 25.
7. GetFullDiscount. Скидка 50%, промокод 44%, покупка в день рождения пользователя. Возвращает 99.
8. GetFullDiscount. Скидка 50%, промокод 45%, покупка в день рождения пользователя (50+45+5=100). Возвращает 95.
9. GetFullDiscount. Скидка 50%, промокод 46%, покупка в день рождения пользователя (сумма более 100). Возвращает 96.
10. GetFullDiscount. Скидка 25%, промокод 50%, покупка в день рождения пользователя. Возвращает 80.
11. GetFullDiscount. Скидка 40%, промокод 40%, покупка в день рождения пользователя. Возвращает 85.
12. GetFullDiscount. Нет скидки, промокод 100%, покупка не в день рождения. Выбрасывает исключение ArgumentOutOfRangeException.
13. GetFullDiscount. Скидка 100%, промокод отсутствует, покупка в день рождения пользователя. Выбрасывает исключение ArgumentOutOfRangeException.

GetFullPrice
1. GetFullPrice. Корзина не содержит товаров. Возвращает 0.
2. GetFullPrice. Корзина содержит 5 товаров по цене 5 и 6 товаров по цене 6, скидка и промокод отсутствуют, покупка не в день рождения. Возвращает 61.
3. GetFullPrice. Корзина содержит 10 товаров по цене 10, скидка 30%, промокод 15%, покупка в день рождения (бонус +5). Возвращает 50.
4. GetFullPrice. Корзина содержит 1 товар по цене 10, скидка 1%. Возвращает 10.
5. GetFullPrice. Корзина содержит 1 товар по цене 10, скидка 9%. Возвращает 10.
6. GetFullPrice. Корзина содержит 1 товар по цене 10, скидка 10%. Возвращает 9.
7. GetFullPrice. Корзина содержит 1 товар по цене 10, скидка 11%. Возвращает 9.
8. GetFullPrice. Корзина содержит 1 товар по цене 10, скидка 99%. Возвращает 1.
9. GetFullPrice. В корзине товар ценов 10, количество штук 1, общая скидка 5%. Возвращает 10.
10. GetFullPrice. В корзине товар ценов 10, количество штук 1, общая скидка 15%. Возвращает 9.
11. GetFullPrice. В корзине товар ценов 1000, количество штук 1, общая скидка 90%. Возвращает 100.
12. GetFullPrice. В корзине товар ценов 500, количество штук 3, общая скидка 25%. Возвращает 1125.

AddProduct
1. AddProduct. Количество товара равно 0. Выбрасывается исключение ArgumentOutOfRangeException.
2. AddProduct. Количество товара отрицательное (-1). Выбрасывается исключение ArgumentOutOfRangeException.
3. AddProduct. Добавляется новый товар с количеством 10. Товар добавляется с количеством 10.
4. AddProduct. Повторное добавление товара, уже присутствующего в корзине, с количеством 10. Количество товара увеличивается на 10.
5. AddProduct. Товар с валидными данными, но с уже существующим идентификатором. Количество товара увеличивается на указанное значение.
6. AddProduct. Новый товар с количеством 1. В списке товаров добавляется новый товар, 1 штука.
7. AddProduct. Попытка добавить товар с количеством 10000. Товар добавляется корректно.
8. AddProduct. Попытка добавить товар с большим количеством, вызывающим переполнение. Выбрасывает исключение OverflowException.

ApplyDiscount
1. ApplyDiscount. Повторное применение скидки, если Discount уже установлен. Выбрасывается исключение с сообщением «Скидка уже применена».
2. ApplyDiscount. Скидка 101%. Выбрасывается ArgumentOutOfRangeException.
3. ApplyDiscount. Скидка 100%. Выбрасывается ArgumentOutOfRangeException.
4. ApplyDiscount. Скидка 0%. Выбрасывается ArgumentOutOfRangeException.
5. ApplyDiscount. Скидка -1%. Выбрасывается ArgumentOutOfRangeException.
6. ApplyDiscount. Скидка 1% без промокода. Устанавливается Discount = 1.
7. ApplyDiscount. Скидка 99% без промокода. Устанавливается Discount = 99.
8. ApplyDiscount. Скидка 50% при уже применённом промокоде со скидкой 49 (50+49=99). Устанавливается Discount = 50.
9. ApplyDiscount. Скидка 50% при промокоде со скидкой 50 (50+50=100). Выбрасывается ArgumentException с сообщением «Общая скидка не может быть больше 100%».
10. ApplyDiscount. Скидка 51% при промокоде со скидкой 50 (51+50=101). Выбрасывается ArgumentException с сообщением «Общая скидка не может быть больше 100%».
11. ApplyDiscount. Скидка 10%, промокод отсутствует. Свойство Discount равно 10.
12. ApplyDiscount. Скидка 5%, промокод на 95%. Выбрасывает исключение ArgumentException "Общая скидка не может быть больше 100%".
13. ApplyDiscount. Попытка применить отрицательную скидку -50%. Выбрасывает исключение ArgumentOutOfRangeException.
14. ApplyDiscount. Попытка применить скидку 101%. Выбрасывает исключение ArgumentOutOfRangeException.

ApplyPromo
1. ApplyPromo. Попытка повторного применения промокода, если PromoCode уже установлен. Выбрасывается исключение с сообщением «Промокод уже применён».
2. ApplyPromo. Промокод со скидкой 1% при отсутствии скидки в корзине. Устанавливается PromoCode.
3. ApplyPromo. Промокод со скидкой 99% при отсутствии скидки в корзине. Устанавливается PromoCode.
4. ApplyPromo. Промокод со скидкой 50% при установленном Discount 49 (49+50=99). Устанавливается PromoCode.
5. ApplyPromo. Промокод со скидкой 50% при установленном Discount 50 (50+50=100). Выбрасывается ArgumentException с сообщением «Общая скидка не может быть больше 100%».
6. ApplyPromo. Промокод со скидкой 51% при установленном Discount 50 (50+51=101). Выбрасывается ArgumentException с сообщением «Общая скидка не может быть больше 100%».
7. ApplyPromo. Применение премиального промокода со скидкой 10% (PremiumOnly = true) для пользователя без премиум аккаунта. Выбрасывается исключение с сообщением «Промокод только для пользователей премиальных аккаунтов».
8. ApplyPromo. Применение премиального промокода со скидкой 10% (PremiumOnly = true) для пользователя с премиум аккаунтом. Устанавливается PromoCode.
9. ApplyPromo. Применение непремиального промокода со скидкой 10% (PremiumOnly = false) для пользователя с премиум аккаунтом. Устанавливается PromoCode.
10. ApplyPromo. Промокод на 20%, скидка на 70%. Свойство PromoCode равно входящему параметру promoCode.
11. ApplyPromo. Промокод на 1%, скидка на 98%. Свойство PromoCode равно входящему параметру promoCode.
12. ApplyPromo. Промокод со скидкой 0%. Выбрасывает исключение ArgumentOutOfRangeException.
13. ApplyPromo. Промокод со скидкой 100%. Выбрасывает исключение ArgumentOutOfRangeException.
14. ApplyPromo. Применение истёкшего промокода со скидкой 20%. Выбрасывает исключение "Промокод истёк".
15. ApplyPromo. Применение промокода, который ещё не активен. Выбрасывает исключение "Промокод ещё не активен".